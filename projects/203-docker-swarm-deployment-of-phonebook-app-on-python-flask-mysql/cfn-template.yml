AWSTemplateFormatVersion: 2010-09-09
Description: |
  This Cloudformation Template creates a phonebook application web application developed in Python Flask, 
  deployed with Docker Swarm on Elastic Compute Cloud (EC2) Instances by pulling the app images from 
  the AWS Elastic Container Registry (ECR) repository.
Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair
Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": "ec2-user"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  EC2InstanceConnectandECR:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  EC2ConnectandECRProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnectandECR
  SwarmSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Kube Masters
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0

  SwarmSGIngress1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt SwarmSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId

  GrandMaster:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c94855ba95c71c99
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectandECRProfile
      SecurityGroupIds:
        - !GetAtt SwarmSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Grand Master of ${AWS::StackName}
      UserData: 
        Fn::Base64: 
          !Sub 
          - |
            #! /bin/bash
            yum update -y
            hostnamectl set-hostname Grand-Master
            amazon-linux-extras install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker swarm init
            docker service create --name=viz --publish=8080:8080/tcp --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
            dockersamples/visualizer
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            yum install git -y
            aws ecr create-repository --repository-name mucahit-k/phonebook-app
            docker build --force-rm -t "${ECR_REGISTRY}/${APP_REPO_NAME}:latest" ${GITHUB_REPO}
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com"
            docker push "${ECR_REGISTRY}/${APP_REPO_NAME}:latest"
            yum install amazon-ecr-credential-helper -y
            mkdir -p /home/ec2-user/.docker
            cd /home/ec2-user/.docker
            echo '{"credsStore": "ecr-login"}' > config.json
            mkdir -p /home/ec2-user/phonebook-app
            cd /home/ec2-user/phonebook-app
            curl -o "init.sql" -L ${GITHUB_FILE_URL}init.sql
            curl -o "docker-compose.yml" -L ${GITHUB_FILE_URL}docker-compose.yml
            cat << EOF | tee .env
            ECR_REGISTRY=${ECR_REGISTRY}
            APP_REPO_NAME=${APP_REPO_NAME}
            EOF
            docker stack deploy -c /home/ec2-user/phonebook-app/docker-compose.yml phonebook-app
          - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            APP_REPO_NAME: mucahit-k/phonebook-app
            GITHUB_REPO: https://github.com/mucahit-k/devops-projects.git#:projects/203-docker-swarm-deployment-of-phonebook-app-on-python-flask-mysql
            GITHUB_FILE_URL: https://raw.githubusercontent.com/mucahit-k/devops-projects/master/projects/203-docker-swarm-deployment-of-phonebook-app-on-python-flask-mysql/
  ManagerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: DockerManagerLaunchTemplate
      LaunchTemplateData: 
        ImageId: ami-0c94855ba95c71c99
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        IamInstanceProfile: 
          Name: !Ref EC2ConnectandECRProfile
        SecurityGroupIds:
          - !GetAtt SwarmSecurityGroup.GroupId
        UserData: 
          Fn::Base64: 
            !Sub 
            - |
              #! /bin/bash
              yum update -y 
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ec2-user
              newgrp docker
              curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              yum install python3-pip -y
              pip3 install ec2instanceconnectcli
              docker swarm join --token $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ec2-user@${GrandMaster} docker swarm join-token manager | awk 'NR == 3 {print $5}') ${GrandMaster.PrivateIp}:2377
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com"
              yum install amazon-ecr-credential-helper -y
              mkdir -p /home/ec2-user/.docker
              cd /home/ec2-user/.docker
              echo '{"credsStore": "ecr-login"}' > config.json
            - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              APP_REPO_NAME: mucahit-k/phonebook-app

  WorkerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: DockerWorkerLaunchTemplate
      LaunchTemplateData: 
        ImageId: ami-0c94855ba95c71c99
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        IamInstanceProfile: 
          Name: !Ref EC2ConnectandECRProfile
        SecurityGroupIds:
          - !GetAtt SwarmSecurityGroup.GroupId
        UserData: 
          Fn::Base64: 
            !Sub 
            - |
              #! /bin/bash
              yum update -y
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ec2-user
              newgrp docker
              curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              yum install python3-pip -y
              pip3 install ec2instanceconnectcli
              docker swarm join --token $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ec2-user@${GrandMaster} docker swarm join-token worker | awk 'NR == 3 {print $5}') ${GrandMaster.PrivateIp}:2377
              yum install amazon-ecr-credential-helper -y
              mkdir -p /home/ec2-user/.docker
              cd /home/ec2-user/.docker
              echo '{"credsStore": "ecr-login"}' > config.json
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com"
              yum install amazon-ecr-credential-helper -y
              mkdir -p /home/ec2-user/.docker
              cd /home/ec2-user/.docker
              echo '{"credsStore": "ecr-login"}' > config.json
            - ECR_REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              APP_REPO_NAME: mucahit-k/phonebook-app

              
  DockerManager2:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMaster
    Properties:
      LaunchTemplate:
        Version: !GetAtt ManagerLT.LatestVersionNumber
        LaunchTemplateId: !Ref ManagerLT
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Manager 2 of ${AWS::StackName}
  
  DockerManager3:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMaster
    Properties:
      LaunchTemplate:
        Version: !GetAtt ManagerLT.LatestVersionNumber
        LaunchTemplateId: !Ref ManagerLT
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Manager 3 of ${AWS::StackName}
  
  DockerWorker1:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMaster
    Properties:
      LaunchTemplate:
        Version: !GetAtt WorkerLT.LatestVersionNumber
        LaunchTemplateId: !Ref WorkerLT
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Worker 1 of ${AWS::StackName}
  
  DockerWorker2:
    Type: AWS::EC2::Instance
    DependsOn:
      - GrandMaster
    Properties:
      LaunchTemplate:
        Version: !GetAtt WorkerLT.LatestVersionNumber
        LaunchTemplateId: !Ref WorkerLT
      Tags:                
        -                        
          Key: Name
          Value: !Sub Docker Worker 2 of ${AWS::StackName}
      
Outputs:
  PhonebookAppWebsiteURL:
    Description: Phonebook app URL
    Value: !Sub 
      - http://${PublicAddress}
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName
  VisualizationAppWebsiteURL:
    Description: Visualization app URL
    Value: !Sub 
      - http://${PublicAddress}:8080
      - PublicAddress: !GetAtt GrandMaster.PublicDnsName